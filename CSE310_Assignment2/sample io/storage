STRING (\")(([^"\n])*|([^\\])*|(\\[\n])*)*(\")

STRING \"([^"\n]|(\\\\{NEWLINE}|"\\\"")*\"
{STRING}  {
		tokenout << "<STRING, "<< makeSpecialString(yytext) << ">";
		logout << "Line no " << line_count<< ":  TOKEN <STRING> Lexeme " << yytext <<" found --> " <<   "<CONST_CHAR, "<< makeSpecialString(yytext) << ">\n";
}



string makeSpecialString(string str) {
		int len = str.length();
		string modified_str = "";
		for(int i = 0; i < len; i++){
			if(i+1 < len && str[i] == '\\' && str[i+1] == '\n'){
					line_count++;
			}
			else if(str[i] == '\\'){
				
			}
		}
		return str.c_str();
}

STRING_START \"
SPECIAL_STRING2 (\\\\(\r)?\n)[\\nfratbv0\"\']
SPECIAL_STRING1 (\\[\\nfratbv0\"\'])
{STRING_START} {
		BEGIN STRING_STATE;
		str.append(yytext);
		original_str.append(yytext);
}

<STRING_STATE>\" {
		str.append(yytext);
		original_str.append(yytext);
		tokenout << "<STRING, "<< str << ">";
		logout << "Line no " << line_count<< ":  TOKEN <STRING> Lexeme " << original_str <<" found --> " <<   "<STRING, "<< str << ">\n";
		str = "";
		original_str = "";
		BEGIN INITIAL;
}

<STRING_STATE>{SPECIAL_STRING2} {
		logout << "dhukse\n";
		original_str.append(yytext);
		if(yytext[2] == 'n'){
			str.append(1u, '\n');
		}
		if(yytext[2] == 't'){
			str.append(1u, '\t');
		}
		if(yytext[2] == 'a'){
			str.append(1u, '\a');
		}
		if(yytext[2] == 'b'){
			str.append(1u, '\b');
		}
		if(yytext[1] == 'r'){
			str.append(1u, '\r');
		}
		if(yytext[1] == 'f'){
			str.append(1u, '\f');
		}
		if(yytext[1] == 'v'){
			str.append(1u, '\v');
		}
		if(yytext[1] == '0'){
			str.append(1u, '\0');
		}
		if(yytext[1] == '\\'){
			str.append(1u, '\\');
		}	
}
<STRING_STATE>{SPECIAL_STRING1} {
		original_str.append(yytext);
		if(yytext[1] == 'n'){
			str.append(1u, '\n');
		}
		if(yytext[1] == 't'){
			str.append(1u, '\t');
		}
		if(yytext[1] == 'a'){
			str.append(1u, '\a');
		}
		if(yytext[1] == 'b'){
			str.append(1u, '\b');
		}
		if(yytext[1] == 'r'){
			str.append(1u, '\r');
		}
		if(yytext[1] == 'f'){
			str.append(1u, '\f');
		}
		if(yytext[1] == 'v'){
			str.append(1u, '\v');
		}
		if(yytext[1] == '0'){
			str.append(1u, '\0');
		}
		if(yytext[1] == '\\'){
			str.append(1u, '\\');
		}	
}



<STRING_STATE>. {
		str.append(yytext);
		original_str.append(yytext);
}



<STRING_STATE>{SPECIAL_STRING} {
		original_str.append(yytext);
		if(yytext[1] == 'n'){
			str.append(1u, '\n');
		}
		if(yytext[1] == 't'){
			str.append(1u, '\t');
		}
		if(yytext[1] == 'a'){
			str.append(1u, '\a');
		}
		if(yytext[1] == 'b'){
			str.append(1u, '\b');
		}
		if(yytext[1] == 'r'){
			str.append(1u, '\r');
		}
		if(yytext[1] == 'f'){
			str.append(1u, '\f');
		}
		if(yytext[1] == 'v'){
			str.append(1u, '\v');
		}
		if(yytext[1] == '0'){
			str.append(1u, '\0');
		}
		if(yytext[1] == '\\'){
			str.append(1u, '\\');
		}
		
			
}



UNFINISHED_STRING \"([^"\\\r\n]|[\\]([^\r\n]|{NEWLINE}))*

{UNFINISHED_STRING} {
		logout << "Error at line no  " << line_count << ": " << "Unterminated String " <<  yytext << endl;
		logout << endl;
}
